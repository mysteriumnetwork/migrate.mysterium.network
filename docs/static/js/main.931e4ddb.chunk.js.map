{"version":3,"sources":["blockchain.ts","components/PriceSlider.tsx","components/PayloadData.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["web3","Web3","token","eth","Contract","abi","getAddressBalance","address","a","methods","balanceOf","call","balance","isBlockchainAddress","utils","isAddress","encodeTxData","amount","BN","upgrade","encodeABI","PriceSlider","withStyles","thumb","height","width","backgroundColor","marginTop","marginLeft","boxShadow","active","valueLabel","left","top","background","color","fontWeight","textAlign","track","rail","opacity","mark","markActive","markLabel","colorPrimary","Slider","CopyButton","root","FileCopyIcon","PayloadData","props","value","TextField","id","label","variant","disabled","fullWidth","multiline","InputProps","endAdornment","text","IconButton","aria-label","component","useStyles","makeStyles","theme","submit","margin","spacing","form","tooltip","payload","DECIMAL_OFFSET","valueLabelFormat","readableValue","toString","replace","App","classes","React","useState","setAddressStatus","setAddress","setBalance","handleAddressChange","event","walletAddress","currentTarget","validAddress","tokenBalance","setValue","div","toNumber","setPayload","generatePayload","updateValue","newValue","marks","Container","maxWidth","CssBaseline","className","noValidate","Grid","container","item","xs","required","helperText","name","error","onChange","min","max","step","tokenAmount","aria-labelledby","getAriaValueText","undefined","sm","Button","type","onClick","e","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.931e4ddb.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport BN from 'bn.js'\nimport abi from './tokenABI.json'\n\nconst web3 = new Web3('wss://mainnet.infura.io/ws/v3/048b64dd20b7446e9f0ce3a4c79ea13d')\nconst TokenContractAddress = '0xa645264C5603E96c3b0B078cdab68733794B0A71'\nconst token = new web3.eth.Contract((abi as any), TokenContractAddress)\n\nexport async function getAddressBalance(address: string): Promise<string> {\n    const balance = await token.methods.balanceOf(address).call()\n    return balance\n}\n\nexport function isBlockchainAddress(address: string): boolean {\n    return web3.utils.isAddress(address)\n}\n\nexport function encodeTxData(amount: BN = new BN(0)) {\n    return token.methods.upgrade(amount).encodeABI();\n}\n","import Slider from '@material-ui/core/Slider'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst PriceSlider = withStyles({\n    thumb: {\n        height: 20,\n        width: 20,\n        backgroundColor: '#822061',\n        marginTop: -10,\n        marginLeft: -10,\n        '&:focus, &:hover, &$active': {\n            boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n        },\n    },\n    active: {\n        backgroundColor: '#9f1f63'\n    },\n    valueLabel: {\n        left: '-65px',\n        top: -22,\n        '& *': {\n            width: '180px',\n            background: 'transparent',\n            color: '#9f1f63',\n        },\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    track: {\n        height: 3,\n    },\n    rail: {\n        height: 2,\n        opacity: 0.5,\n        backgroundColor: '#bfbfbf',\n    },\n    mark: {\n        backgroundColor: '#bfbfbf',\n        height: 8,\n        width: 1,\n        marginTop: -3,\n    },\n    markActive: {\n        opacity: 1,\n        backgroundColor: 'currentColor',\n    },\n    markLabel: {\n        color: '#aaaaaa'\n    },\n    colorPrimary: {\n        color: '#9f1f63'\n    },\n})(Slider)\n\nexport default PriceSlider\n","import React from 'react'\n\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nimport TextField from '@material-ui/core/TextField'\nimport IconButton from '@material-ui/core/IconButton';\n\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { withStyles } from '@material-ui/core/styles'\n\nconst CopyButton = withStyles({\n    root: {\n        color: '#9f1f63'\n    }\n})(FileCopyIcon)\n\n\ninterface PayloadProps {\n    value: string;\n}\n\nfunction PayloadData(props: PayloadProps) {\n    const { value } = props\n    return (\n        <TextField\n            value={value}\n            id=\"standard-multiline-static\"\n            label=\"Payload data\"\n            // variant=\"outlined\"\n            variant=\"filled\"\n            disabled\n            fullWidth\n            multiline\n            InputProps={{\n                endAdornment: (\n                    <CopyToClipboard text={value}>\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                            <CopyButton />\n                        </IconButton>\n                    </CopyToClipboard>\n                ),\n            }}\n        />\n    )\n}\n\n\nexport default PayloadData\n\n\n","import React from 'react'\nimport BN from 'bn.js'\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { getAddressBalance, isBlockchainAddress, encodeTxData } from './blockchain'\nimport PriceSlider from './components/PriceSlider'\nimport PayloadData from './components/PayloadData'\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { NumberLiteral } from '@babel/types';\n\nconst useStyles = makeStyles(theme => ({\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n        background: 'linear-gradient(125deg, #9f1f63, #262262)'\n    },\n    form: {\n        marginTop: theme.spacing(3),\n    },\n    tooltip: {\n        backgroundColor: 'red'\n    },\n    payload: {\n        marginTop: '50px'\n    }\n}));\n\nconst DECIMAL_OFFSET = new BN(1e8)\n\nfunction valueLabelFormat(value: number) {\n    const readableValue = value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return `${readableValue} MYST`;\n}\n\nfunction App() {\n    const classes = useStyles();\n\n    const [isAddress, setAddressStatus] = React.useState<boolean>(true)\n    const [address, setAddress] = React.useState<string>(\"\")\n    const [balance, setBalance] = React.useState<BN>(new BN(0))\n    const handleAddressChange = async (event: any) => {\n        const walletAddress = event.currentTarget.value\n        setAddress(walletAddress)\n\n        const validAddress = isBlockchainAddress(walletAddress)\n        setAddressStatus(validAddress)\n        if (validAddress) {\n            const tokenBalance = new BN(await getAddressBalance(walletAddress))\n            setBalance(tokenBalance)\n\n            setValue(tokenBalance.div(DECIMAL_OFFSET).toNumber())\n            setPayload(encodeTxData(tokenBalance))\n        }\n    }\n\n    const [payload, setPayload] = React.useState<string>(encodeTxData())\n    const generatePayload = (amount: number = 0) => {\n        if (amount <= 0) amount = 0;\n        const payload = (amount === balance.div(DECIMAL_OFFSET).toNumber())\n            ? encodeTxData(balance)\n            : encodeTxData(new BN(amount * DECIMAL_OFFSET.toNumber()))\n\n        setPayload(payload)\n    }\n\n    const [value, setValue] = React.useState<number>(0);\n    function updateValue(newValue: number) {\n        setValue(newValue)\n        generatePayload(newValue)\n    }\n    const handleInputChange = (event: any, ...params: any[]) => {\n        const amount = event.currentTarget.value\n        updateValue(amount)\n    }\n    const handleChange = (event: any, tokenAmount: number | number[]) => {\n        updateValue(tokenAmount as number)\n    };\n\n    const marks = [{ value: 0, label: '0' }, { value: balance.div(DECIMAL_OFFSET).toNumber(), label: 'Entire balance' }]\n\n    return (\n        <Container maxWidth=\"md\" component=\"main\">\n            <CssBaseline />\n            <form className={classes.form} noValidate>\n                <Grid container spacing={2}>\n                    <Grid item xs={11}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"address\"\n                            label=\"Your MYST wallet address\"\n                            helperText={!isAddress ? \"Incorrect address\" : \"\"}\n                            name=\"address\"\n                            value={address}\n                            error={!isAddress}\n                            onChange={handleAddressChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={11}>\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Amount of MYST to migrate\"\n                            variant=\"outlined\"\n                            name=\"amount\"\n                            value={value}\n                            onChange={handleInputChange}\n                            fullWidth\n                        />\n\n                        {\n                            isAddress && address !== \"\"\n                                ?\n                                <PriceSlider\n                                    value={value}\n                                    min={0}\n                                    max={balance.div(DECIMAL_OFFSET).toNumber()}\n                                    step={1}\n                                    onChange={handleChange}\n                                    aria-labelledby=\"amount-slider\"\n                                    // valueLabelDisplay=\"on\"\n                                    valueLabelFormat={valueLabelFormat}\n                                    getAriaValueText={valueLabelFormat}\n                                    marks={marks}\n                                    disabled={!isAddress || address === \"\"}\n                                />\n                                : undefined\n                        }\n                    </Grid>\n\n                    <Grid item xs={11} sm={4} >\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            onClick={(e: any) => {\n                                e.preventDefault()\n                                generatePayload(value)\n                            }}>\n                            Generate payload\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form >\n\n            <Grid container spacing={2} className={classes.payload}>\n                <Grid item xs={11}>\n                    <PayloadData value={payload} />\n                </Grid>\n            </Grid>\n\n        </Container >\n\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}